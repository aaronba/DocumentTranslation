@page
@model DocumentTranslation.Web.Pages.TranslateModel
@{
    ViewData["Title"] = "Document Translation";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">
                        <i class="fas fa-language"></i>
                        Document Translation
                    </h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.Message))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle"></i>
                            @Model.Message
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle"></i>
                            @Model.ErrorMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    <form method="post" enctype="multipart/form-data" id="translationForm">
                        <div class="mb-3">
                            <label for="UploadedFile" class="form-label">
                                <i class="fas fa-file-upload"></i>
                                Select Document to Translate
                            </label>
                            <input type="file" class="form-control" asp-for="UploadedFile" 
                                   accept=".docx,.pdf,.pptx,.xlsx,.txt,.html,.htm,.md" required>
                            <div class="form-text">
                                Supported formats: Word (.docx), PDF, PowerPoint (.pptx), Excel (.xlsx), Text (.txt), HTML, Markdown
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="SourceLanguage" class="form-label">
                                        <i class="fas fa-globe"></i>
                                        Source Language (Optional)
                                    </label>
                                    <select class="form-select" asp-for="SourceLanguage">
                                        <option value="">Auto-detect</option>
                                        @foreach (var lang in Model.AvailableLanguages)
                                        {
                                            <option value="@lang.Code">@lang.Name</option>
                                        }
                                    </select>
                                    <div class="form-text">Leave blank for automatic language detection</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="TargetLanguage" class="form-label">
                                        <i class="fas fa-flag"></i>
                                        Target Language *
                                    </label>
                                    <select class="form-select" asp-for="TargetLanguage" required>
                                        @foreach (var lang in Model.AvailableLanguages)
                                        {
                                            <option value="@lang.Code" selected="@(lang.Code == Model.TargetLanguage)">
                                                @lang.Name
                                            </option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg" id="translateButton">
                                <span class="btn-text">
                                    <i class="fas fa-language"></i>
                                    Translate Document
                                </span>
                            </button>
                        </div>
                    </form>

                    <!-- Progress Indicator -->
                    <div id="translationProgress" class="translation-progress">
                        <div class="progress-content">
                            <div class="progress-spinner"></div>
                            <div class="progress-message" id="progressMessage">Starting translation...</div>
                            <div class="progress-bar-container">
                                <div class="progress-bar-fill progress-bar-indeterminate" id="progressBar"></div>
                            </div>
                            <div class="progress-status" id="progressStatus">Please wait while your document is being translated</div>
                        </div>
                    </div>

                    @if (Model.TranslatedFiles.Any())
                    {
                        <div class="mt-4 p-3 bg-light rounded">
                            <h5><i class="fas fa-download"></i> Download Translated Documents</h5>
                            
                            @if (Model.TranslatedFiles.Count == 1)
                            {
                                <p>Your translated document is ready for download.</p>
                                <a href="@Url.Page("/Translate", "Download", new { fileName = Model.TranslatedFiles.First() })" class="btn btn-success">
                                    <i class="fas fa-download"></i>
                                    Download @Model.TranslatedFiles.First()
                                </a>
                            }
                            else
                            {
                                <p>Your translated documents are ready for download.</p>
                                <div class="mb-3">
                                    <a href="@Url.Page("/Translate", "DownloadAll")" class="btn btn-success">
                                        <i class="fas fa-file-archive"></i>
                                        Download All Files (ZIP)
                                    </a>
                                </div>
                                
                                <div class="list-group">
                                    @foreach (var file in Model.TranslatedFiles)
                                    {
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <span><i class="fas fa-file"></i> @file</span>
                                            <a href="@Url.Page("/Translate", "Download", new { fileName = file })" class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-download"></i> Download
                                            </a>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="fas fa-info-circle"></i>
                        How it works
                    </h5>
                    <ol>
                        <li>Upload your document using the form above</li>
                        <li>Select the target language for translation</li>
                        <li>Optionally specify the source language (or leave blank for auto-detection)</li>
                        <li>Click "Translate Document" to start the process</li>
                        <li>Download your translated document when ready</li>
                    </ol>
                    <p class="text-muted mb-0">
                        <small>
                            <i class="fas fa-shield-alt"></i>
                            Your documents are processed securely and temporarily stored only during translation.
                        </small>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Show progress indicator
        function showProgress() {
            document.getElementById('translationProgress').classList.add('show');
            document.getElementById('translateButton').classList.add('btn-loading');
            document.getElementById('translateButton').disabled = true;
        }

        // Hide progress indicator
        function hideProgress() {
            document.getElementById('translationProgress').classList.remove('show');
            document.getElementById('translateButton').classList.remove('btn-loading');
            document.getElementById('translateButton').disabled = false;
        }

        // Update progress message
        function updateProgress(message, status) {
            document.getElementById('progressMessage').textContent = message;
            document.getElementById('progressStatus').textContent = `Status: ${status}`;
        }

        // Show success message
        function showSuccess(message) {
            const alertHtml = `
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            insertAlert(alertHtml);
        }

        // Show error message
        function showError(message) {
            const alertHtml = `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            insertAlert(alertHtml);
        }

        // Insert alert into the page
        function insertAlert(alertHtml) {
            const cardBody = document.querySelector('.card-body');
            const form = document.getElementById('translationForm');
            form.insertAdjacentHTML('beforebegin', alertHtml);
            
            // Auto-dismiss after 5 seconds
            setTimeout(function() {
                const alert = cardBody.querySelector('.alert');
                if (alert) {
                    alert.remove();
                }
            }, 5000);
        }

        // Handle form submission
        document.getElementById('translationForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const form = e.target;
            const formData = new FormData(form);

            try {
                showProgress();
                updateProgress('Preparing translation...', 'Starting');

                // Simulate progress updates for demo
                setTimeout(() => updateProgress('Uploading file...', 'Uploading'), 500);
                setTimeout(() => updateProgress('Processing document...', 'Processing'), 1500);
                setTimeout(() => updateProgress('Translating content...', 'Translating'), 3000);
                setTimeout(() => updateProgress('Finalizing translation...', 'Finalizing'), 5000);

                const response = await fetch('/api/mocktranslation/translate', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Translation failed');
                }

                const result = await response.json();
                
                hideProgress();
                showSuccess(result.message || 'Translation completed successfully!');
                
                // Reload to show download section after a delay
                setTimeout(() => {
                    window.location.reload();
                }, 2000);

            } catch (error) {
                hideProgress();
                showError(`Translation failed: ${error.message}`);
            }
        });

        // File validation
        document.querySelector('input[type="file"]').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const maxSize = 50 * 1024 * 1024; // 50MB
                if (file.size > maxSize) {
                    alert('File size must be less than 50MB');
                    e.target.value = '';
                    return;
                }
            }
        });
    </script>
}
