@page
@model DocumentTranslation.Web.Pages.TranslateModel
@{
    ViewData["Title"] = "Document Translation";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">
                        <i class="fas fa-language"></i>
                        Document Translation
                    </h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.Message))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle"></i>
                            @Model.Message
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle"></i>
                            @Model.ErrorMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    <form method="post" enctype="multipart/form-data" id="translationForm">
                        <div class="mb-3">
                            <label for="UploadedFile" class="form-label">
                                <i class="fas fa-file-upload"></i>
                                Select Document to Translate
                            </label>
                            <input type="file" class="form-control" asp-for="UploadedFile" 
                                   accept=".docx,.pdf,.pptx,.xlsx,.txt,.html,.htm,.md" required>
                            <div class="form-text">
                                Supported formats: Word (.docx), PDF, PowerPoint (.pptx), Excel (.xlsx), Text (.txt), HTML, Markdown
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="SourceLanguage" class="form-label">
                                        <i class="fas fa-globe"></i>
                                        Source Language (Optional)
                                    </label>
                                    <select class="form-select" asp-for="SourceLanguage">
                                        <option value="">Auto-detect</option>
                                        @foreach (var lang in Model.AvailableLanguages)
                                        {
                                            <option value="@lang.Code">@lang.Name</option>
                                        }
                                    </select>
                                    <div class="form-text">Leave blank for automatic language detection</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="TargetLanguage" class="form-label">
                                        <i class="fas fa-flag"></i>
                                        Target Language *
                                    </label>
                                    <select class="form-select" asp-for="TargetLanguage" required>
                                        @foreach (var lang in Model.AvailableLanguages)
                                        {
                                            @if (lang.Code == Model.TargetLanguage)
                                            {
                                                <option value="@lang.Code" selected>@lang.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@lang.Code">@lang.Name</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg" id="translateButton">
                                <span class="btn-text">
                                    <i class="fas fa-language"></i>
                                    Translate Document
                                </span>
                            </button>
                        </div>
                    </form>

                    <!-- Progress Indicator -->
                    <div id="translationProgress" class="translation-progress">
                        <div class="progress-content">
                            <div class="progress-spinner"></div>
                            <div class="progress-message" id="progressMessage">Starting translation...</div>
                            <div class="progress-bar-container">
                                <div class="progress-bar-fill progress-bar-indeterminate" id="progressBar"></div>
                            </div>
                            <div class="progress-status" id="progressStatus">Please wait while your document is being translated</div>
                        </div>
                    </div>

                    @if (Model.TranslatedFiles.Any())
                    {
                        <div class="mt-4 p-3 bg-light rounded">
                            <h5><i class="fas fa-download"></i> Download Translated Documents</h5>
                            
                            @if (Model.TranslatedFiles.Count == 1)
                            {
                                <p>Your translated document is ready for download.</p>
                                <a href="@Url.Page("/Translate", "Download", new { fileName = Model.TranslatedFiles.First() })" class="btn btn-success">
                                    <i class="fas fa-download"></i>
                                    Download @Model.TranslatedFiles.First()
                                </a>
                            }
                            else
                            {
                                <p>Your translated documents are ready for download.</p>
                                <div class="mb-3">
                                    <a href="@Url.Page("/Translate", "DownloadAll")" class="btn btn-success">
                                        <i class="fas fa-file-archive"></i>
                                        Download All Files (ZIP)
                                    </a>
                                </div>
                                
                                <div class="list-group">
                                    @foreach (var file in Model.TranslatedFiles)
                                    {
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <span><i class="fas fa-file"></i> @file</span>
                                            <a href="@Url.Page("/Translate", "Download", new { fileName = file })" class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-download"></i> Download
                                            </a>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="fas fa-info-circle"></i>
                        How it works
                    </h5>
                    <ol>
                        <li>Upload your document using the form above</li>
                        <li>Select the target language for translation</li>
                        <li>Optionally specify the source language (or leave blank for auto-detection)</li>
                        <li>Click "Translate Document" to start the process</li>
                        <li>Download your translated document when ready</li>
                    </ol>
                    <p class="text-muted mb-0">
                        <small>
                            <i class="fas fa-shield-alt"></i>
                            Your documents are processed securely and temporarily stored only during translation.
                        </small>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    <script>
        let connection;
        let connectionId;

        // Initialize SignalR connection
        async function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/translationProgressHub")
                .build();

            connection.on("StatusUpdate", function (update) {
                updateProgress(update.message, update.status);
            });

            connection.on("TranslationError", function (error) {
                hideProgress();
                showError(error.message);
            });

            connection.on("TranslationComplete", function (result) {
                console.log("TranslationComplete received:", result);
                hideProgress();
                showSuccess(result.message || 'Translation completed successfully!');
                
                // Instead of reloading, show download section dynamically
                if (result.files && result.files.length > 0) {
                    console.log("Showing download section for files:", result.files);
                    showDownloadSection(result.files);
                } else {
                    console.log("No files returned, will reload page");
                    // If no files returned, reload after a delay to check server state
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                }
            });

            try {
                await connection.start();
                connectionId = connection.connectionId;
                console.log("SignalR Connected with ID:", connectionId);
            } catch (err) {
                console.error("SignalR Connection Error:", err);
            }
        }

        // Show progress indicator
        function showProgress() {
            document.getElementById('translationProgress').classList.add('show');
            document.getElementById('translateButton').classList.add('btn-loading');
            document.getElementById('translateButton').disabled = true;
        }

        // Hide progress indicator
        function hideProgress() {
            document.getElementById('translationProgress').classList.remove('show');
            document.getElementById('translateButton').classList.remove('btn-loading');
            document.getElementById('translateButton').disabled = false;
        }

        // Update progress message
        function updateProgress(message, status) {
            document.getElementById('progressMessage').textContent = message;
            // Use more appropriate status names for display
            let displayStatus = status;
            if (status === 'NotStarted' || status === 'InProgress') {
                displayStatus = 'Translating';
            }
            document.getElementById('progressStatus').textContent = `Status: ${displayStatus}`;
        }

        // Show success message
        function showSuccess(message) {
            const alertHtml = `
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            insertAlert(alertHtml);
        }

        // Show error message
        function showError(message) {
            const alertHtml = `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            insertAlert(alertHtml);
        }

        // Show download section with translated files
        function showDownloadSection(files) {
            // Remove existing download section if any
            const existingSection = document.querySelector('.download-section');
            if (existingSection) {
                existingSection.remove();
            }
            
            // Create download section HTML
            let downloadHtml = `
                <div class="mt-4 p-3 bg-light rounded download-section">
                    <h5><i class="fas fa-download"></i> Download Translated Documents</h5>
            `;
            
            if (files.length === 1) {
                downloadHtml += `
                    <p>Your translated document is ready for download.</p>
                    <a href="/Translate?handler=Download&fileName=${encodeURIComponent(files[0])}" class="btn btn-success">
                        <i class="fas fa-download"></i>
                        Download ${files[0]}
                    </a>
                `;
            } else {
                downloadHtml += `
                    <p>Your translated documents are ready for download.</p>
                    <div class="mb-3">
                        <a href="/Translate?handler=DownloadAll" class="btn btn-success">
                            <i class="fas fa-file-archive"></i>
                            Download All Files (ZIP)
                        </a>
                    </div>
                    <div class="list-group">
                `;
                
                files.forEach(file => {
                    downloadHtml += `
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <span><i class="fas fa-file"></i> ${file}</span>
                            <a href="/Translate?handler=Download&fileName=${encodeURIComponent(file)}" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-download"></i> Download
                            </a>
                        </div>
                    `;
                });
                
                downloadHtml += `</div>`;
            }
            
            downloadHtml += `</div>`;
            
            // Insert download section after the form
            const form = document.getElementById('translationForm');
            form.insertAdjacentHTML('afterend', downloadHtml);
        }

        // Insert alert into the page
        function insertAlert(alertHtml) {
            const cardBody = document.querySelector('.card-body');
            const form = document.getElementById('translationForm');
            form.insertAdjacentHTML('beforebegin', alertHtml);
            
            // Auto-dismiss after 5 seconds
            setTimeout(function() {
                const alert = cardBody.querySelector('.alert');
                if (alert) {
                    alert.remove();
                }
            }, 5000);
        }

        // Handle form submission
        document.getElementById('translationForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const form = e.target;
            
            // Debug: Log the actual form HTML
            console.log('Form HTML:', form.innerHTML);
            
            // Get form values - try multiple selectors to find the elements
            const fileInput = form.querySelector('input[type="file"]') || 
                             form.querySelector('input[name="UploadedFile"]') ||
                             form.querySelector('#UploadedFile');
            
            const targetLanguageSelect = form.querySelector('select[name="TargetLanguage"]') ||
                                        form.querySelector('#TargetLanguage') ||
                                        form.querySelector('select[required]');
            
            const sourceLanguageSelect = form.querySelector('select[name="SourceLanguage"]') ||
                                        form.querySelector('#SourceLanguage') ||
                                        form.querySelector('select:not([required])');
            
            // Debug logging
            console.log('Form elements found:');
            console.log('File input:', fileInput);
            console.log('Target language select:', targetLanguageSelect);
            console.log('Source language select:', sourceLanguageSelect);
            
            if (targetLanguageSelect) {
                console.log('Target language element details:');
                console.log('- tagName:', targetLanguageSelect.tagName);
                console.log('- name:', targetLanguageSelect.name);
                console.log('- id:', targetLanguageSelect.id);
                console.log('- value:', targetLanguageSelect.value);
                console.log('- selectedIndex:', targetLanguageSelect.selectedIndex);
                console.log('- options length:', targetLanguageSelect.options.length);
                if (targetLanguageSelect.options.length > 0) {
                    console.log('- selected option:', targetLanguageSelect.options[targetLanguageSelect.selectedIndex]);
                    console.log('- selected option value:', targetLanguageSelect.options[targetLanguageSelect.selectedIndex]?.value);
                }
            }
            
            // Also log all form elements to debug
            console.log('All form elements:');
            const allInputs = form.querySelectorAll('input, select');
            allInputs.forEach((element, index) => {
                console.log(`Element ${index}:`, {
                    tagName: element.tagName,
                    type: element.type,
                    name: element.name,
                    id: element.id,
                    value: element.value,
                    required: element.required
                });
            });
            
            // Validate required fields
            if (!fileInput) {
                showError('File input field not found.');
                return;
            }
            
            if (!targetLanguageSelect) {
                showError('Target language field not found.');
                return;
            }
            
            if (!fileInput.files || !fileInput.files[0]) {
                showError('Please select a file to translate.');
                return;
            }
            
            if (!targetLanguageSelect.value || targetLanguageSelect.value === '') {
                showError('Please select a target language for translation.');
                return;
            }
            
            // Create FormData manually with the correct values
            const formData = new FormData();
            
            // Add the file
            formData.append('file', fileInput.files[0]);
            
            // Add target language
            formData.append('targetLanguage', targetLanguageSelect.value);
            
            // Add source language if selected
            if (sourceLanguageSelect && sourceLanguageSelect.value && sourceLanguageSelect.value !== '') {
                formData.append('sourceLanguage', sourceLanguageSelect.value);
            }
            
            // Debug: Log final FormData contents
            console.log('Final FormData contents being sent to API:');
            for (let [key, value] of formData.entries()) {
                console.log(key, ':', value);
                if (value instanceof File) {
                    console.log(`  File details - name: ${value.name}, size: ${value.size}, type: ${value.type}`);
                }
            }

            try {
                showProgress();
                updateProgress('Uploading document to Azure...', 'Translating');

                // Join the SignalR group for this translation
                if (connection && connectionId) {
                    await connection.invoke("JoinTranslationGroup", connectionId);
                    // Add connectionId to form data for the server to send updates
                    formData.append('connectionId', connectionId);
                }

                const response = await fetch('/api/translation/translate', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Translation failed');
                }

                const result = await response.json();
                
                // Don't hide progress here - let SignalR handle it when translation is complete
                updateProgress('Translation submitted successfully. Processing document...', 'InProgress');

            } catch (error) {
                hideProgress();
                showError(`Translation failed: ${error.message}`);
                
                // Leave the SignalR group on error
                if (connection && connectionId) {
                    await connection.invoke("LeaveTranslationGroup", connectionId);
                }
            }
        });

        // File validation
        document.querySelector('input[type="file"]').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const maxSize = 50 * 1024 * 1024; // 50MB
                if (file.size > maxSize) {
                    alert('File size must be less than 50MB');
                    e.target.value = '';
                    return;
                }
            }
        });

        // Initialize SignalR when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeSignalR();
        });

        // Clean up SignalR connection when page unloads
        window.addEventListener('beforeunload', function() {
            if (connection) {
                connection.stop();
            }
        });
    </script>
}
